from django.shortcuts import render , redirect
from django.contrib.auth.forms import UserCreationForm , AuthenticationForm
from django.contrib.auth.models import User
from django.contrib.auth import login, logout, authenticate
from django.db import IntegrityError
import requests


# Create your views here.

def Home(request):
    return render(request, 'home.html')

def Signup(request):
    if request.method == 'GET':
        return render(request, 'signup.html', {
            'form': UserCreationForm
        })
    else:
        if request.POST['password1'] == request.POST['password2']:
            try: 
                user = User.objects.create_user(
                    username=request.POST['username'], password=request.POST['password1'])
                user.save()
                login(request, user)
                return redirect('usuario')
            except IntegrityError:
                return render(request, 'signup.html', {
                    'form': UserCreationForm,
                    "error": 'Usuario ya existe'
                })
        
        return render(request, 'signup.html', {
            'form': UserCreationForm,
            "error": 'Las contraseñas no coinciden'
        })

def Users(request):
    return render(request, 'user.html')

def signout(request):
    logout(request)
    return redirect('Home')


def signin(request):
    #URL de la solicitud: inicio de sesión
    URL_API = 'http://localhost:3000/api/v2/users'

    if request.method == 'GET':
        return render(request, 'signin.html', {
            'form': AuthenticationForm()
        })
    else:
        user = authenticate(
            request, username=request.POST['username'], 
            password=request.POST['password'])
        if user is None:
            return render(request, 'signin.html', {
                'form': AuthenticationForm(),
                'error': 'Usuario y contraseña no coinciden'
            })
        else:
            login(request, user)
            return redirect('usuario')




def Signup(request):
    URL_API = 'http://localhost:3000/api/v2/users'
    response = requests.get(URL_API)
    user = response.json()
    if request.method == 'GET':
        return render(request, 'signup.html', {
            'form': CreateUser()
        })
    elif request.method == 'POST':
        form = CreateUser(request.POST)
        if form.is_valid():
            try:
                user = User.objects.create_user(
                    email=form.cleaned_data['email'], 
                    password=form.cleaned_data['password1'])
                login(request, user)
                return redirect('usuario')
            except IntegrityError:
                return render(request, 'signup.html', {
                    'form': form,
                    "error": 'Usuario ya existe'
                })
        else:
            return render(request, 'signup.html', {
                'form': form,
                "error": 'el formulario no es valido'
            })
    else:
        return render(request, 'signup.html', {
            'form': CreateUser(),
            "error": 'el formulario no es valido'
        })


# incio de sesion para persona
def login_per(request):
    # Ajusta la URL de la API
    URL_API = 'http://localhost:3000/api/v2/users/authenticate/'

    if request.method == 'POST':
        FormInPer = FormularioInicioPersona(request.POST)
        if FormInPer.is_valid():
            # Obtén las credenciales del formulario
            email = FormInPer.cleaned_data['email']
            password = FormInPer.cleaned_data['password']

            # Realiza la solicitud a la API para autenticar al usuario
            api_data = {'email': email, 'password': password}
            api_response = requests.post(URL_API, data=api_data)

            if api_response.status_code == 200:
                # La API ha autenticado al usuario, ahora intenta iniciar sesión en Django
                user_data = api_response.json()['user']
                UserPer = authenticate(request, username=user_data['email'], password=password)

                if UserPer is not None:
                    login(request, UserPer)
                    return redirect('usuario')
                else:
                    return render(request, 'login_per.html', {
                        'form': FormInPer, 'error': 'Error al iniciar sesión en Django'
                    })
            else:
                # La API no pudo autenticar al usuario
                return render(request, 'login_per.html', {
                    'form': FormInPer, 'error': 'Credenciales no válidas'
                })
        else:
            # El formulario no es válido
            return render(request, 'login_per.html', {
                'form': FormInPer, 'error': 'El formulario no es válido'
            })
    else:
        # Manejar la petición GET según sea necesario
        FormInPer = FormularioInicioPersona()
        return render(request, 'login_per.html', {'form': FormInPer})